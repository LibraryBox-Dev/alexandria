from ConfigEngine import ConfigEngine, toBool, writeLines

engine = ConfigEngine()


@engine.assertConfig("network",(
        "hostapd_enable",
        "hostapd_interface",
        "hostapd_channel",
        "hostapd_ssid",
        "hostapd_wpa",
        "hostapd_psk"
        ))
@engine.generator("hostapd configuration")
def hostapd(io):
    io.write("# This file is auto generated by a script\n")

    # get the hostapd settings.
    network = engine.getSection("network",predicate=lambda k:k.startswith("hostapd_"))
     
    # the first thing we write to the hostapd config is the details on interface and specific
    # details. 
    if toBool(network["hostapd_enable"]) == False:
       return
    writeLines(io, [
        "interface={0}".format(network['hostapd_interface']),
        "hw_mode=g",
        "channel={0}".format(network['hostapd_channel']),
        "ssid={0}".format(network["hostapd_ssid"]),
        ])
    if( toBool( network["hostapd_wpa"]) ):
        # Enable WPA encryption
        writeLines(io, [
            "auth_algs=1",
            "wpa=2",
            "wpa_key_mgmt=WPA-PSK",
            "wpa_pairwise=CCMP",
            "rsn_pairwise=CCMP",
            "wpa_passphrase={0}".format(network["hostapd_psk"])
            ])
    # end hostapd configuration generator

@engine.generator("Debian /etc/network/interfaces")
def debian_network(buffer):
    pass

@engine.assertConfig("network", [ 
    "dnsmasq_enable",
    "dnsmasq_interface",
    "dnsmasq_start_address",
    "dnsmasq_end_address",
    "dnsmasq_subnet_mask",
    "dnsmasq_lease_time"
    ])
@engine.generator("DNSMasq DHCP and DNS server")
def dnsmasq(buffer):

    network = engine.getSection("network")
    if not toBool(network["dnsmasq_enable"]):
        return

    writeLines(buffer,[
        "interface={0}".format(network["dnsmasq_interface"]),
        "dhcp-range={dnsmasq_start_address},{dnsmasq_end_address},{dnsmasq_subnet_mask},{dnsmasq_lease_time}".format_map(network)
        ])

    pass
