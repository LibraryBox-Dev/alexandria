from ConfigEngine import ConfigEngine, toBool, writeLines

engine = ConfigEngine()


@engine.assertConfig("network",(
        "hostapd_enable",
        "hostapd_interface",
        "hostapd_channel",
        "hostapd_ssid",
        "hostapd_wpa",
        "hostapd_psk"
        ))
@engine.generator("hostapd configuration")
def hostapd(io):
    io.write("# This file is auto generated by a script\n")

    # get the hostapd settings.
    network = engine.getSection("network",predicate=lambda k:k.startswith("hostapd_"))
     
    # the first thing we write to the hostapd config is the details on interface and specific
    # details. 
    if toBool(network["hostapd_enable"]) == False:
       return
    writeLines(io, [
        "interface={0}".format(network['hostapd_interface']),
        "hw_mode=g",
        "channel={0}".format(network['hostapd_channel']),
        "ssid={0}".format(network["hostapd_ssid"]),
        ])
    if( toBool( network["hostapd_wpa"]) ):
        # Enable WPA encryption
        writeLines(io, [
            "auth_algs=1",
            "wpa=2",
            "wpa_key_mgmt=WPA-PSK",
            "wpa_pairwise=CCMP",
            "rsn_pairwise=CCMP",
            "wpa_passphrase={0}".format(network["hostapd_psk"])
            ])
    # end hostapd configuration generator

@engine.namespace("interface")
@engine.assertConfig(None, [ "type","enabled","dhcp","ip","subnet_mask","gateway" ])
@engine.generator("Debian interface confguration (single interface)",True)
def debian_interface(buffer, iface):

    # If DHCP is enabled, it's simple
    ifacedict = engine.getSection("interface."+iface)

    
    if(toBool(ifacedict["enabled"])):
        print("auto {0}".format(iface))


    if(toBool(ifacedict["dhcp"])):
        # Sanity check: Is this the interface for dnsmasq or hostapd?
        dnsmasq_iface = engine.getOption("network","dnsmasq_interface")
        hostapd_iface = engine.getOption("network","hostapd_interface")
        if(iface == dnsmasq_iface or iface == hostapd_iface):
            raise ValueError("Can't run dnsmasq or hostapd on a dhcp interface.")

        # This is a dhcp interface.
        writeLines(buffer, [
            "allow-hotplug {0}".format(iface),
            "iface {0} inet dhcp".format(iface)
            ])
        # we can now return happily.
        return
    else:
        
        writeLines(buffer, [
            "iface {0} inet static".format(iface),
            "\taddress {0}".format(ifacedict["ip"]),
            "\tnetmask {0}".format(ifacedict["subnet_mask"]),
            ])
        if ifacedict["gateway"] != "":
            writeLines(buffer, ["\tgateway {0}".format(ifacedict["gateway"])])

@engine.generator("Debian loopback interface")
def debian_loopback(buffer):
    writeLines(buffer,[
        "auto lo"
        "iface lo inet loopback"
        ])

@engine.assertConfig("general",["hostname"])
@engine.assertConfig("network", [ 
    "dnsmasq_enable",
    "dnsmasq_interface",
    "dnsmasq_start_address",
    "dnsmasq_end_address",
    "dnsmasq_subnet_mask",
    "dnsmasq_lease_time"
    ])
@engine.generator("DNSMasq DHCP and DNS server")
def dnsmasq(buffer):

    network = engine.getSection("network")
    if not toBool(network["dnsmasq_enable"]):
        return

    writeLines(buffer,[
        "interface={0}".format(network["dnsmasq_interface"]),
        "dhcp-range={dnsmasq_start_address},{dnsmasq_end_address},{dnsmasq_subnet_mask},{dnsmasq_lease_time}".format_map(network),
        "local=/{0}/".format(engine.getOption("general","tld")),
        "dhcp-option=3"
        ])

    # we need to get the IP address of the interface.
    # we also should make sure that the interface isn't set up for DHCP.

    # Check that the section for the interface exists

    if not engine.hasSection("interface."+network["dnsmasq_interface"]):
        raise ValueError("Interface for dnsmasq is not defined.")
    if not engine.hasOption("interface."+network["dnsmasq_interface"], "dhcp") or engine.getOption("interface."+network["dnsmasq_interface"],"dhcp",toBool):
        raise ValueError("Interface for dnsmasq does not define DHCP option or is configured for dhcp")
    # we want the IP address of the interface.
    ipAddr = engine.getOption("interface."+network["dnsmasq_interface"], "ip")
    writeLines(buffer, ["address=/{0}/{1}".format(
        engine.getOption("general","hostname")+engine.getOption("general","tld"),
        ipAddr
        )])
    pass
