#!/usr/bin/env python3
import socket
import argparse
import subprocess
import signal
import socketserver

import os, pwd, grp, sys

def drop_privileges(uid_name='nobody', gid_name='nogroup'):
    if os.getuid() != 0:
        # We're not root so, like, whatever dude
        return

    # Get the uid/gid from the name
    running_uid = pwd.getpwnam(uid_name).pw_uid
    running_gid = grp.getgrnam(gid_name).gr_gid

    # Remove group privileges
    os.setgroups([])

    # Try setting the new uid/gid
    os.setgid(running_gid)
    os.setuid(running_uid)

    # Ensure a very conservative umask
    old_umask = os.umask(0o077)

children = []


def mk_handler(command):
    class sockHandler(socketserver.StreamRequestHandler):
        child = None
        pid = None
        def handle(self):
            # get a subprocess
            print("{0}: starting process {1}".format(self.client_address[0], ' '.join(command)))
            self.child = subprocess.Popen(command, stdin=self.rfile,stdout=self.wfile,stderr=self.wfile)
            self.pid = self.child.pid
            children.append(self.pid)
            print("{0}: started child process with pid {1}".format(self.client_address[0],self.pid))
            self.child.wait()
            print("{0}: child exited with status {1}".format(self.client_address[0],self.child.returncode))
            children.remove(self.pid)
        def finish(self):
            # We're going to try and clean up our child process.
            if self.child != None and self.child.returncode is None:
                children.remove(self.child.pid)
                print("{1}: terminating child {0}".format(self.child.pid, self.client_address[0]))
                self.child.terminate()
    return sockHandler

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('port',    metavar='port',    type=int,help="Port to listen on")
    parser.add_argument('cmdline', metavar='cmdline',      nargs=argparse.REMAINDER, help='command to spawn on connect')
    parser.add_argument('-noroot', action='store_true', help="If root, drop to a different user")
    parser.add_argument('-user',   metavar='uid:gid', default='nobody:nogroup',       help="User:group to drop privs to (default 'nobody:nogroup')")
    parser.add_argument('-host',   default='localhost', type=str,  help="Host to bind to (default 'localhost')" )
    args = parser.parse_args()

    server=None
    try:
        server=socketserver.TCPServer((args.host,args.port), mk_handler(args.cmdline))
    except Exception as ex:
        print("Failed to start server: ex=",ex)
        sys.exit(-1)

    if(args.noroot):
        # attempt to drop privs.
        try:
            (user,group) = args.user.split(':')
            print("Dropping to uid={0} gid={1}".format(user,group))
            drop_privileges(user, group)
        except:
            print("Failed to drop priveleges; check malformed uid:gid and that you can setuid/setgid")
            sys.exit(-1)

    try:
        print("starting serve loop")
        server.serve_forever()
    except:
        print("Shutting down server")
        server.shutdown()
    finally:
        print("Cleaning up children.")
        for cpid in children:
            
            os.kill(cpid,9)
        
